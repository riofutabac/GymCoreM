{
  "name": "gymcore",
  "version": "1.0.0",
  "description": "Sistema de gestiÃ³n integral para gimnasios con arquitectura de microservicios",
  "main": "index.js",
  "scripts": {
    "sync:users": "infisical run --path=/auth-service -- pnpm exec ts-node backend/apps/auth-service/src/resync-users.ts",
    "clean:dist": "pnpm -r exec powershell -Command \"if (Test-Path dist) { Remove-Item -Recurse -Force dist }\"",
    "dev": "pnpm --parallel --stream -r run start:dev",
    "rebuild": "pnpm clean:dist && pnpm build",
    "dev:all": "concurrently \"pnpm dev:gateway\" \"pnpm dev:auth\" \"pnpm dev:gyms\" \"pnpm dev:inventory\" \"pnpm dev:notifications\" \"pnpm dev:payments\" \"pnpm dev:analytics\"",
    "dev:backend": "concurrently \"pnpm dev:gateway\" \"pnpm dev:auth\" \"pnpm dev:gyms\" \"pnpm dev:inventory\" \"pnpm dev:notifications\" \"pnpm dev:payments\" \"pnpm dev:analytics\"",
    "dev:gateway": "infisical run --path=/api-gateway -- pnpm --filter api-gateway run start:dev",
    "dev:auth": "infisical run --path=/auth-service -- pnpm --filter auth-service run start:dev",
    "dev:gyms": "infisical run --path=/gym-management-service -- pnpm --filter gym-management-service run start:dev",
    "dev:payments": "infisical run --path=/payment-service -- pnpm --filter payment-service run start:dev",
    "dev:notifications": "infisical run --path=/notification-service -- pnpm --filter notification-service run start:dev",
    "dev:inventory": "infisical run --path=/inventory-service -- pnpm --filter inventory-service run start:dev",
    "dev:analytics": "infisical run --path=/analytics-service -- pnpm --filter analytics-service run start:dev",
    "dev:biometric": "infisical run --path=/biometric-service -- pnpm --filter biometric-service run start:dev",
    "dev:logging": "infisical run --path=/logging-service -- pnpm --filter logging-service run start:dev",
    "dev:frontend": "infisical run --path=/web-dashboard -- pnpm --filter web-dashboard run dev",
    "build": "pnpm -r run build",
    "build:backend": "pnpm --filter \"./backend/apps/*\" run build",
    "build:frontend": "pnpm --filter web-dashboard run build",
    "build:gateway": "pnpm --filter api-gateway run build",
    "build:auth": "pnpm --filter auth-service run build",
    "build:gyms": "pnpm --filter gym-management-service run build",
    "build:payments": "pnpm --filter payment-service run build",
    "build:analytics": "pnpm --filter analytics-service run build",
    "start": "pnpm --parallel --stream -r run start:prod",
    "start:gateway": "pnpm --filter api-gateway run start:prod",
    "start:auth": "pnpm --filter auth-service run start:prod",
    "start:gyms": "pnpm --filter gym-management-service run start:prod",
    "start:payments": "pnpm --filter payment-service run start:prod",
    "start:analytics": "pnpm --filter analytics-service run start:prod",
    "db:generate:auth": "infisical run --path=/auth-service -- pnpm exec prisma generate --schema=./backend/apps/auth-service/prisma/schema.prisma",
    "db:generate:gym": "infisical run --path=/gym-management-service -- pnpm exec prisma generate --schema=./backend/apps/gym-management-service/prisma/schema.prisma",
    "db:generate:inventory": "infisical run --path=/inventory-service -- pnpm exec prisma generate --schema=./backend/apps/inventory-service/prisma/schema.prisma",
    "db:generate:payment": "infisical run --path=/payment-service -- pnpm exec prisma generate --schema=./backend/apps/payment-service/prisma/schema.prisma",
    "db:generate:all": "pnpm -r --parallel run db:generate",
    "db:migrate:auth": "infisical run --path=/auth-service -- pnpm exec prisma migrate dev --schema=./backend/apps/auth-service/prisma/schema.prisma",
    "db:migrate:gym": "infisical run --path=/gym-management-service -- pnpm exec prisma migrate dev --schema=./backend/apps/gym-management-service/prisma/schema.prisma",
    "db:migrate:inventory": "infisical run --path=/inventory-service -- pnpm exec prisma migrate dev --schema=./backend/apps/inventory-service/prisma/schema.prisma",
    "db:migrate:payment": "infisical run --path=/payment-service -- pnpm exec prisma migrate dev --schema=./backend/apps/payment-service/prisma/schema.prisma",
    "db:migrate:all": "pnpm db:migrate:auth && pnpm db:migrate:gym && pnpm db:migrate:inventory && pnpm db:migrate:payment",
    "db:push:auth": "infisical run --path=/auth-service -- pnpm exec prisma db push --schema=./backend/apps/auth-service/prisma/schema.prisma",
    "db:push:gym": "infisical run --path=/gym-management-service -- pnpm exec prisma db push --schema=./backend/apps/gym-management-service/prisma/schema.prisma",
    "db:push:inventory": "infisical run --path=/inventory-service -- pnpm exec prisma db push --schema=./backend/apps/inventory-service/prisma/schema.prisma",
    "db:push:payment": "infisical run --path=/payment-service -- pnpm exec prisma db push --schema=./backend/apps/payment-service/prisma/schema.prisma",
    "db:reset:auth": "infisical run --path=/auth-service -- pnpm exec prisma migrate reset --schema=./backend/apps/auth-service/prisma/schema.prisma",
    "db:reset:gym": "infisical run --path=/gym-management-service -- pnpm exec prisma migrate reset --schema=./backend/apps/gym-management-service/prisma/schema.prisma",
    "db:reset:inventory": "infisical run --path=/inventory-service -- pnpm exec prisma migrate reset --schema=./backend/apps/inventory-service/prisma/schema.prisma",
    "db:reset:payment": "infisical run --path=/payment-service -- pnpm exec prisma migrate reset --schema=./backend/apps/payment-service/prisma/schema.prisma",
    "db:reset:all": "pnpm db:reset:auth && pnpm db:reset:gym && pnpm db:reset:inventory && pnpm db:reset:payment",
    "test": "pnpm -r run test",
    "test:auth": "infisical run --path=/auth-service -- pnpm --filter auth-service run test",
    "test:gyms": "infisical run --path=/gym-management-service -- pnpm --filter gym-management-service run test",
    "test:payments": "infisical run --path=/payment-service -- pnpm --filter payment-service run test",
    "test:gateway": "infisical run --path=/api-gateway -- pnpm --filter api-gateway run test",
    "test:inventory": "infisical run --path=/inventory-service -- pnpm --filter inventory-service run test",
    "test:analytics": "infisical run --path=/analytics-service -- pnpm --filter analytics-service run test",
    "test:notifications": "infisical run --path=/notification-service -- pnpm --filter notification-service run test",
    "test:frontend": "pnpm --filter web-dashboard run test",
    "test:coverage": "pnpm test:cov && node scripts/merge-coverage.js",
    "test:watch": "pnpm -r run test:watch",
    "test:e2e": "pnpm -r run test:e2e",
    "test:unit:backend": "concurrently \"pnpm test:auth\" \"pnpm test:gyms\" \"pnpm test:payments\" \"pnpm test:gateway\" \"pnpm test:inventory\" \"pnpm test:analytics\" \"pnpm test:notifications\"",
    "test:unit:all": "concurrently \"pnpm test:unit:backend\" \"pnpm test:frontend\"",
    "test:sonar": "pnpm test:cov && node scripts/merge-coverage.js",
    "test:cov": "pnpm -r run test:cov",
    "lint": "cross-env ESLINT_USE_FLAT_CONFIG=false pnpm -r run lint",
    "lint:fix": "cross-env ESLINT_USE_FLAT_CONFIG=false pnpm -r run lint --fix",
    "format": "pnpm -r run format",
    "format:check": "pnpm -r run format:check",
    "install:all": "pnpm install && pnpm -r install",
    "clean": "pnpm -r run clean && rm -rf node_modules",
    "clean:deps": "pnpm -r exec rm -rf node_modules && rm -rf node_modules",
    "reinstall": "pnpm clean:deps && pnpm install:all",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:restart": "docker-compose restart",
    "health": "node scripts/health-check.js",
    "check:services": "concurrently \"curl -f http://localhost:3000/health\" \"curl -f http://localhost:3001/auth\" \"curl -f http://localhost:3002/gyms/health\" \"curl -f http://localhost:3003/payments/health\"",
    "dev:services": "pnpm dev:backend",
    "dev:full": "pnpm dev:all",
    "postinstall": "pnpm db:generate:all",
    "precommit": "pnpm lint && pnpm test",
    "prepare": "husky install || true",
    "db:init:owner": "infisical run --path=/auth-service -- pnpm exec ts-node backend/apps/auth-service/src/inicializar-owner.ts"
  },
  "keywords": [
    "gym",
    "fitness",
    "management",
    "microservices",
    "nestjs",
    "react",
    "typescript",
    "supabase"
  ],
  "author": "Tu Nombre",
  "license": "ISC",
  "packageManager": "pnpm@10.12.1",
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-prettier": "^5.5.1",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.10",
    "prisma": "^6.9.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "@prisma/client": "^6.9.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "pnpm": ">=8.0.0"
  },
  "pnpm": {
    "overrides": {
      "@prisma/client": "^6.9.0"
    }
  },
  "eslintConfig": {
    "env": {
      "es6": true
    }
  }
}
