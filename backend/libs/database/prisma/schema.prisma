// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// #############################################
// #           CONFIGURACIÓN GENERAL           #
// #############################################

generator client {
  provider = "prisma-client-js"
  // Apunta a la raíz de node_modules para que todos los servicios lo encuentren
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// #############################################
// #      MODELOS DE USUARIOS Y SEGURIDAD      #
// #############################################

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String // Siempre debe almacenarse con hash (bcrypt)
  firstName        String?
  lastName         String?
  role             Role      @default(MEMBER)
  isActive         Boolean   @default(true) // Para desactivación en lugar de borrado
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relaciones de roles con Gimnasio
  managedGym       Gym?      @relation("GymManager") // Si el usuario es Gerente de UN gimnasio
  
  // Relación de pertenencia a un gimnasio (como socio o recepcionista)
  gymId            String?
  gym              Gym?      @relation("GymStaffAndMembers", fields: [gymId], references: [id])
  
  // Relaciones con otras entidades
  memberships      Membership[]
  biometric        BiometricTemplate?
  accessLogs       AccessLog[]
  salesMade        Sale[]             @relation("CashierSales")
  paymentsVerified Payment[]          @relation("PaymentVerifier")
  membershipsActivated Membership[]     @relation("MembershipActivator")
  auditLogs        AuditLog[]
}

model BiometricTemplate {
  id        String   @id @default(cuid())
  template  String // Plantilla de la huella, CIFRADA con AES-256 en la capa de aplicación
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String // Ej: "USER_ROLE_UPDATED", "MEMBERSHIP_MANUAL_ACTIVATION"
  details     Json? // Payload con datos del antes y después
  timestamp   DateTime @default(now())
  
  // Quién realizó la acción
  actorId     String
  actor       User     @relation(fields: [actorId], references: [id])
}


// #############################################
// #      MODELOS DE GIMNASIO Y GESTIÓN        #
// #############################################

model Gym {
  id          String       @id @default(cuid())
  name        String
  uniqueCode  String       @unique @default(cuid()) // Código alfanumérico para unirse
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relaciones de roles
  managerId   String?      @unique // Un gimnasio solo puede tener UN gerente
  manager     User?        @relation("GymManager", fields: [managerId], references: [id])
  
  staffAndMembers User[]   @relation("GymStaffAndMembers")
  
  // Relaciones con otras entidades
  memberships Membership[]
  products    Product[]
  sales       Sale[]
  accessLogs  AccessLog[]
}

model Membership {
  id                 String           @id @default(cuid())
  status             MembershipStatus @default(ACTIVE)
  startDate          DateTime
  endDate            DateTime
  cancellationReason String?
  
  // Relaciones
  userId             String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  gymId              String
  gym                Gym              @relation(fields: [gymId], references: [id], onDelete: Cascade)
  
  // Auditoría para activación manual
  activatedById      String?
  activatedBy        User?            @relation("MembershipActivator", fields: [activatedById], references: [id])

  payments           Payment[]
}

model AccessLog {
  id           String     @id @default(cuid())
  accessTime   DateTime   @default(now())
  accessType   AccessType
  isSuccess    Boolean
  
  // Relaciones
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  gymId        String
  gym          Gym        @relation(fields: [gymId], references: [id])
}


// #############################################
// #      MODELOS DE PAGOS E INVENTARIO        #
// #############################################

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String? // ID de la pasarela de pago (Stripe, Kushki, etc.)
  receiptImageUrl String? // URL para comprobantes de transferencia
  createdAt       DateTime      @default(now())
  
  // Relaciones
  membershipId    String
  membership      Membership    @relation(fields: [membershipId], references: [id])
  
  // Auditoría para verificación manual
  verifiedById    String?
  verifiedBy      User?         @relation("PaymentVerifier", fields: [verifiedById], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int
  
  // Relaciones
  gymId       String
  gym         Gym      @relation(fields: [gymId], references: [id])
  sales       SaleItem[]
}

model Sale {
  id          String     @id @default(cuid())
  totalAmount Float
  createdAt   DateTime   @default(now())
  
  // Relaciones
  cashierId   String
  cashier     User       @relation("CashierSales", fields: [cashierId], references: [id])
  gymId       String
  gym         Gym        @relation(fields: [gymId], references: [id])
  items       SaleItem[]
}

model SaleItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float // Precio al momento de la venta
  
  // Relaciones
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}


// #############################################
// #                 ENUMERACIONES             #
// #############################################

enum Role {
  OWNER
  MANAGER
  RECEPTIONIST
  MEMBER
}

enum MembershipStatus {
  ACTIVE
  PENDING_PAYMENT
  EXPIRED
  CANCELLED
  GRACE_PERIOD
}

enum AccessType {
  BIOMETRIC
  MANUAL
}

enum PaymentMethod {
  CASH
  TRANSFER
  CREDIT_CARD_STRIPE
  CREDIT_CARD_KUSHKI
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  VERIFIED // Estado intermedio para transferencias
}